// Code generated by mockery v2.52.2. DO NOT EDIT.

package cache

import (
	types "github.com/aquasecurity/trivy/pkg/fanal/types"
	mock "github.com/stretchr/testify/mock"
)

// MockArtifactCache is an autogenerated mock type for the ArtifactCache type
type MockArtifactCache struct {
	mock.Mock
}

// DeleteBlobs provides a mock function with given fields: blobIDs
func (_m *MockArtifactCache) DeleteBlobs(blobIDs []string) error {
	ret := _m.Called(blobIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlobs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(blobIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MissingBlobs provides a mock function with given fields: artifactID, blobIDs
func (_m *MockArtifactCache) MissingBlobs(artifactID string, blobIDs []string) (bool, []string, error) {
	ret := _m.Called(artifactID, blobIDs)

	if len(ret) == 0 {
		panic("no return value specified for MissingBlobs")
	}

	var r0 bool
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, []string) (bool, []string, error)); ok {
		return rf(artifactID, blobIDs)
	}
	if rf, ok := ret.Get(0).(func(string, []string) bool); ok {
		r0 = rf(artifactID, blobIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, []string) []string); ok {
		r1 = rf(artifactID, blobIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(string, []string) error); ok {
		r2 = rf(artifactID, blobIDs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PutArtifact provides a mock function with given fields: artifactID, artifactInfo
func (_m *MockArtifactCache) PutArtifact(artifactID string, artifactInfo types.ArtifactInfo) error {
	ret := _m.Called(artifactID, artifactInfo)

	if len(ret) == 0 {
		panic("no return value specified for PutArtifact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.ArtifactInfo) error); ok {
		r0 = rf(artifactID, artifactInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutBlob provides a mock function with given fields: blobID, blobInfo
func (_m *MockArtifactCache) PutBlob(blobID string, blobInfo types.BlobInfo) error {
	ret := _m.Called(blobID, blobInfo)

	if len(ret) == 0 {
		panic("no return value specified for PutBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.BlobInfo) error); ok {
		r0 = rf(blobID, blobInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockArtifactCache creates a new instance of MockArtifactCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArtifactCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArtifactCache {
	mock := &MockArtifactCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
