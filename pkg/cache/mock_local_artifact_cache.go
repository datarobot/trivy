// Code generated by mockery v2.52.2. DO NOT EDIT.

package cache

import (
	types "github.com/aquasecurity/trivy/pkg/fanal/types"
	mock "github.com/stretchr/testify/mock"
)

// MockLocalArtifactCache is an autogenerated mock type for the LocalArtifactCache type
type MockLocalArtifactCache struct {
	mock.Mock
}

// Clear provides a mock function with no fields
func (_m *MockLocalArtifactCache) Clear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with no fields
func (_m *MockLocalArtifactCache) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArtifact provides a mock function with given fields: artifactID
func (_m *MockLocalArtifactCache) GetArtifact(artifactID string) (types.ArtifactInfo, error) {
	ret := _m.Called(artifactID)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifact")
	}

	var r0 types.ArtifactInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.ArtifactInfo, error)); ok {
		return rf(artifactID)
	}
	if rf, ok := ret.Get(0).(func(string) types.ArtifactInfo); ok {
		r0 = rf(artifactID)
	} else {
		r0 = ret.Get(0).(types.ArtifactInfo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(artifactID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlob provides a mock function with given fields: blobID
func (_m *MockLocalArtifactCache) GetBlob(blobID string) (types.BlobInfo, error) {
	ret := _m.Called(blobID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 types.BlobInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.BlobInfo, error)); ok {
		return rf(blobID)
	}
	if rf, ok := ret.Get(0).(func(string) types.BlobInfo); ok {
		r0 = rf(blobID)
	} else {
		r0 = ret.Get(0).(types.BlobInfo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockLocalArtifactCache creates a new instance of MockLocalArtifactCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalArtifactCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalArtifactCache {
	mock := &MockLocalArtifactCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
